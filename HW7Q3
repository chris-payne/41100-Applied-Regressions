#HW7 Q3
# indicates hw Question number
## indicates comment
### indicates question

# i Examine the data for outlier patterns in the weather and remove them. 
##  Give clear justification for each data point removed.

setwd(dir = '/Users/ChrisMacAir/Documents/Chicago Booth/2019Q2/Regressions/WK9')
BikeData = read.csv(file = "bikeSharing.csv")

## weather
BikeData$weather<-as.factor(BikeData$weather)
summary(BikeData$weather)
wxcriteria <- BikeData$weather != 4

df <- BikeData[wxcriteria, ]

## season: Make it a factor
BikeData$season <- as.factor(BikeData$season)
summary(BikeData$season)

## holiday: Make it a factor
BikeData$holiday <- as.factor(BikeData$holiday)
summary(BikeData$holiday)

## workingday: Make it a factor
BikeData$workingday <- as.factor(BikeData$workingday)
summary(BikeData$workingday)

## windspeed: square root transformation
BikeData$windspeed <- sqrt(BikeData$windspeed)
summary(BikeData$windspeed)

## Check the model
dim(BikeData)
dim(df)
summary(BikeData)
summary(df)

# ii First split the data into training and testing samples (size and sampling scheme is up to you).
# ii We wonâ€™t use the test set until the very end.

#BikeData$logTotal <- log(BikeData$count)  ## For use later
### you need to get rid of the "label" column, and ViolentCR Does this apply to our data??
### Time seems to matter. Do I want to get rid of count like we got rid of violent CR??
XY <- df[,-(12)] 
## create training and validation sets
index <- sample(1:nrow(df),8000)
training <- XY[index,] 
validation <- XY[-index,]
plot(training)

## define the scope from small model to big
#null <- lm(logTotal ~ 1, data=training) ## next problem
#full <- lm(logTotal ~ ., data=training) ## next problem
## build a regression model with the BIC
#fwdBIC <- step(null, scope=formula(full), direction="forward", k=log(8000))  ## next problem
### why is this messing up? Followed example exactly...

# iii Create dummy variables for each hour (24 total).
## 2 models. One for registered and non-registered users. 
## Compare to non-counterparts in season. Can use string variables. 
## fwdBIC step (response) on count, on registered.
## use model matrix??? ## or create factor for the hours
df$datetime <- as.factor(df$datetime)
Hour <- substr(df$datetime, 12,13)
DataHour <- as.factor(Hour)
summary(DataHour)

df1 = df
df1$hour = DataHour
XY1 <- df1[,(-12)][,-10][,-1]

XY2 <- df1[,(-11:-12)][,-1]
nullc <- lm(casual ~ 1, data=XY2)
fullc <- lm(casual ~ ., data=XY2)
fullcint <- lm(casual ~ . + .^2, data=XY2)
fwdBICc <- step(nullc, scope=formula(fullc), direction="forward", k=log(nrow(XY2)))
fwdBICcint <- (step(nullc, scope=formula(fullcint), direction="forward", k=log(nrow(XY2))))
BestCasual <- lm(casual ~ hour + atemp + workingday + humidity + season + weather + 
       holiday + hour:workingday + hour:atemp + atemp:workingday + 
       atemp:season + humidity:season + hour:humidity + workingday:humidity + 
       atemp:humidity + workingday:season + season:holiday + atemp:weather + 
       humidity:holiday, data=XY2)

#Casual 
plot(XY2$hour, XY2$casual, xlab = "Hour", ylab="Casual Riders", 
     main="Casual Riders per Hour")
abline (BestCasual)


## Unneeded
# nullcas <- lm(casual ~ 1, data=XY1)
# fullcas <- lm(casual ~ . - hour - season,data=XY1)
# fullcasint<-lm(casual ~ . - hour - season + 
#                  (. - hour - season)^2, data=XY1)
# fwdBICcas <- step(nullcas, scope=formula(fullcas),
#                   direction="forward", k=log(nrow(XY1)))
# fwdBICcasint <- step(nullcas, scope=formula(fullcasint),
#                      direction="forward", k=log(nrow(XY1)))

#Registered
nullreg <- lm(registered ~ 1, data=XY1)
fullreg <- lm(registered ~ ., data=XY1)
fullregint <- lm(registered ~ . + .^2, data=XY1)
fwdBICreg <- step(nullreg, scope=formula(fullreg), direction="forward", k=log(nrow(XY1)))
fwdBICregint <- (step(nullreg, scope=formula(fullregint), direction="forward", k=log(nrow(XY1))))

BestRegistered <- lm(registered ~ hour + atemp + season + weather + workingday + humidity + 
                       temp, data=XY1)

plot(XY1$hour, XY1$registered, xlab = "Hour", ylab="Registered Riders", 
     main="Registered Riders per Hour")
abline (BestRegistered)


